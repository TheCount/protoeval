// File value.proto defines descriptions of evaluation rules for a protobuf
// message, i. e., how to map a protobuf message to a value.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.2
// source: protoeval/value.proto

package protoeval

import (
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	any "github.com/golang/protobuf/ptypes/any"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Kind enumerates protobuf type kinds as in
// google.protobuf.FieldDescriptorProto.Type. We cannot use the latter enum
// because it is a proto2 type and we use proto3 syntax.
// The enum numbers are identical, though.
type Value_Kind int32

const (
	// INVALID has no counterpart in google.protobuf.FieldDescriptorProto.Type,
	// but proto3 enums must start with zero.
	Value_INVALID Value_Kind = 0
	// DOUBLE is the kind of the double type.
	Value_DOUBLE Value_Kind = 1
	// FLOAT is the kind of the float type.
	Value_FLOAT Value_Kind = 2
	// INT64 is the kind of the int64 type.
	Value_INT64 Value_Kind = 3
	// UINT64 is the kind of the uint64 type.
	Value_UINT64 Value_Kind = 4
	// INT32 is the kind of the int32 type.
	Value_INT32 Value_Kind = 5
	// FIXED64 is the kind of the fixed64 type.
	Value_FIXED64 Value_Kind = 6
	// FIXED32 is the kind of the fixed32 type.
	Value_FIXED32 Value_Kind = 7
	// BOOL is the kind of the bool type.
	Value_BOOL Value_Kind = 8
	// STRING is the kind of the string type.
	Value_STRING Value_Kind = 9
	// MESSAGE is the kind for all message types.
	Value_MESSAGE Value_Kind = 11
	// BYTES is the kind for the bytes type.
	Value_BYTES Value_Kind = 12
	// UINT32 is the kind for the uint32 type.
	Value_UINT32 Value_Kind = 13
	// ENUM is the kind for all enum types.
	Value_ENUM Value_Kind = 14
	// SFIXED32 is the kind for the sfixed32 type.
	Value_SFIXED32 Value_Kind = 15
	// SFIXED64 is the kind for the sfixed64 type.
	Value_SFIXED64 Value_Kind = 16
	// SINT32 is the kind for the sint32 type.
	Value_SINT32 Value_Kind = 17
	// SINT64 is the kind for the sint64 type.
	Value_SINT64 Value_Kind = 18
)

// Enum value maps for Value_Kind.
var (
	Value_Kind_name = map[int32]string{
		0:  "INVALID",
		1:  "DOUBLE",
		2:  "FLOAT",
		3:  "INT64",
		4:  "UINT64",
		5:  "INT32",
		6:  "FIXED64",
		7:  "FIXED32",
		8:  "BOOL",
		9:  "STRING",
		11: "MESSAGE",
		12: "BYTES",
		13: "UINT32",
		14: "ENUM",
		15: "SFIXED32",
		16: "SFIXED64",
		17: "SINT32",
		18: "SINT64",
	}
	Value_Kind_value = map[string]int32{
		"INVALID":  0,
		"DOUBLE":   1,
		"FLOAT":    2,
		"INT64":    3,
		"UINT64":   4,
		"INT32":    5,
		"FIXED64":  6,
		"FIXED32":  7,
		"BOOL":     8,
		"STRING":   9,
		"MESSAGE":  11,
		"BYTES":    12,
		"UINT32":   13,
		"ENUM":     14,
		"SFIXED32": 15,
		"SFIXED64": 16,
		"SINT32":   17,
		"SINT64":   18,
	}
)

func (x Value_Kind) Enum() *Value_Kind {
	p := new(Value_Kind)
	*p = x
	return p
}

func (x Value_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Value_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_protoeval_value_proto_enumTypes[0].Descriptor()
}

func (Value_Kind) Type() protoreflect.EnumType {
	return &file_protoeval_value_proto_enumTypes[0]
}

func (x Value_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Value_Kind.Descriptor instead.
func (Value_Kind) EnumDescriptor() ([]byte, []int) {
	return file_protoeval_value_proto_rawDescGZIP(), []int{0, 0}
}

// Value describes how to arrive at a value given an environment and a scope.
// An environment maps names to other Values and is predetermined by the user.
// A scope arises from how the fields in a Value are used (see their
// documentation). The initial scope is the protobuf message to be evaluated.
type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// drop_args drops the specified number of arguments (optional). That is, if
	// drop_args = n, args 0 through n-1 are dropped and the previously n-th
	// argument becomes the 0-th argument.
	// drop_args is applied before the args field is.
	//
	// Since arguments are available only from the current scope and all
	// subscopes, explicitly dropping arguments may be unnecessary.
	DropArgs uint32 `protobuf:"varint,1,opt,name=drop_args,json=dropArgs,proto3" json:"drop_args,omitempty"`
	// args adds the specified arguments. Arguments can be accessed by a
	// zero based index. Previous arguments are shifted, e. g., if the length
	// of args is n, the previous 0-th argument becomes the n-th argument.
	// Optional.
	//
	// The args field is applied after the drop_args and the scope fields.
	// The arguments are available in the resulting scope and all subscopes.
	Args []*Value `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	// scope changes the scope relative to the current scope.
	//
	// If omitted, the current scope remains unchanged.
	//
	// If empty, forces the creation of a new scope identical to its parent scope.
	// This can be useful in combination with argument handling.
	//
	// If non-empty, each element corresponds to a field, list element, or map
	// entry selection. A string element can select a message field by name or a
	// map entry (if the map does not have string keys, an attempt at conversion
	// will be made). A number element can select a message field by field number,
	// a list entry by index, or a map entry if the map has integer keys. It is an
	// error if the number is not losslessly convertible to the corresponding
	// integer type. A bool element can only select a map entry, and the map must
	// have boolean keys.
	Scope *_struct.ListValue `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	// value describes the actual value. If omitted, the value will be the
	// scope value.
	//
	// Types that are assignable to Value:
	//	*Value_Arg
	//	*Value_Parent
	//	*Value_Default
	//	*Value_Nil
	//	*Value_Bool
	//	*Value_Int
	//	*Value_Uint
	//	*Value_Double
	//	*Value_String_
	//	*Value_Bytes
	//	*Value_Enum_
	//	*Value_List_
	//	*Value_Map_
	//	*Value_Message_
	//	*Value_BasicMessage
	//	*Value_Duration
	//	*Value_Timestamp
	//	*Value_Not
	//	*Value_AllOf
	//	*Value_AnyOf
	//	*Value_Seq
	//	*Value_Switch_
	//	*Value_While
	//	*Value_Break
	//	*Value_Continue
	//	*Value_Store
	//	*Value_Proc
	//	*Value_Load
	//	*Value_Program_
	//	*Value_Range_
	Value isValue_Value `protobuf_oneof:"value"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protoeval_value_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_protoeval_value_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_protoeval_value_proto_rawDescGZIP(), []int{0}
}

func (x *Value) GetDropArgs() uint32 {
	if x != nil {
		return x.DropArgs
	}
	return 0
}

func (x *Value) GetArgs() []*Value {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Value) GetScope() *_struct.ListValue {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Value) GetArg() uint32 {
	if x, ok := x.GetValue().(*Value_Arg); ok {
		return x.Arg
	}
	return 0
}

func (x *Value) GetParent() *Value {
	if x, ok := x.GetValue().(*Value_Parent); ok {
		return x.Parent
	}
	return nil
}

func (x *Value) GetDefault() *empty.Empty {
	if x, ok := x.GetValue().(*Value_Default); ok {
		return x.Default
	}
	return nil
}

func (x *Value) GetNil() *empty.Empty {
	if x, ok := x.GetValue().(*Value_Nil); ok {
		return x.Nil
	}
	return nil
}

func (x *Value) GetBool() bool {
	if x, ok := x.GetValue().(*Value_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *Value) GetInt() int64 {
	if x, ok := x.GetValue().(*Value_Int); ok {
		return x.Int
	}
	return 0
}

func (x *Value) GetUint() uint64 {
	if x, ok := x.GetValue().(*Value_Uint); ok {
		return x.Uint
	}
	return 0
}

func (x *Value) GetDouble() float64 {
	if x, ok := x.GetValue().(*Value_Double); ok {
		return x.Double
	}
	return 0
}

func (x *Value) GetString_() string {
	if x, ok := x.GetValue().(*Value_String_); ok {
		return x.String_
	}
	return ""
}

func (x *Value) GetBytes() []byte {
	if x, ok := x.GetValue().(*Value_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *Value) GetEnum() *Value_Enum {
	if x, ok := x.GetValue().(*Value_Enum_); ok {
		return x.Enum
	}
	return nil
}

func (x *Value) GetList() *Value_List {
	if x, ok := x.GetValue().(*Value_List_); ok {
		return x.List
	}
	return nil
}

func (x *Value) GetMap() *Value_Map {
	if x, ok := x.GetValue().(*Value_Map_); ok {
		return x.Map
	}
	return nil
}

func (x *Value) GetMessage() *Value_Message {
	if x, ok := x.GetValue().(*Value_Message_); ok {
		return x.Message
	}
	return nil
}

func (x *Value) GetBasicMessage() *any.Any {
	if x, ok := x.GetValue().(*Value_BasicMessage); ok {
		return x.BasicMessage
	}
	return nil
}

func (x *Value) GetDuration() *duration.Duration {
	if x, ok := x.GetValue().(*Value_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *Value) GetTimestamp() *timestamp.Timestamp {
	if x, ok := x.GetValue().(*Value_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *Value) GetNot() *Value {
	if x, ok := x.GetValue().(*Value_Not); ok {
		return x.Not
	}
	return nil
}

func (x *Value) GetAllOf() *Value_ValueList {
	if x, ok := x.GetValue().(*Value_AllOf); ok {
		return x.AllOf
	}
	return nil
}

func (x *Value) GetAnyOf() *Value_ValueList {
	if x, ok := x.GetValue().(*Value_AnyOf); ok {
		return x.AnyOf
	}
	return nil
}

func (x *Value) GetSeq() *Value_ValueList {
	if x, ok := x.GetValue().(*Value_Seq); ok {
		return x.Seq
	}
	return nil
}

func (x *Value) GetSwitch() *Value_Switch {
	if x, ok := x.GetValue().(*Value_Switch_); ok {
		return x.Switch
	}
	return nil
}

func (x *Value) GetWhile() *Value_Branch {
	if x, ok := x.GetValue().(*Value_While); ok {
		return x.While
	}
	return nil
}

func (x *Value) GetBreak() uint32 {
	if x, ok := x.GetValue().(*Value_Break); ok {
		return x.Break
	}
	return 0
}

func (x *Value) GetContinue() uint32 {
	if x, ok := x.GetValue().(*Value_Continue); ok {
		return x.Continue
	}
	return 0
}

func (x *Value) GetStore() *Value_StoredValue {
	if x, ok := x.GetValue().(*Value_Store); ok {
		return x.Store
	}
	return nil
}

func (x *Value) GetProc() *Value_StoredValue {
	if x, ok := x.GetValue().(*Value_Proc); ok {
		return x.Proc
	}
	return nil
}

func (x *Value) GetLoad() string {
	if x, ok := x.GetValue().(*Value_Load); ok {
		return x.Load
	}
	return ""
}

func (x *Value) GetProgram() *Value_Program {
	if x, ok := x.GetValue().(*Value_Program_); ok {
		return x.Program
	}
	return nil
}

func (x *Value) GetRange() *Value_Range {
	if x, ok := x.GetValue().(*Value_Range_); ok {
		return x.Range
	}
	return nil
}

type isValue_Value interface {
	isValue_Value()
}

type Value_Arg struct {
	// arg yields the numbered argument.
	Arg uint32 `protobuf:"varint,4,opt,name=arg,proto3,oneof"`
}

type Value_Parent struct {
	// parent is a value based on the parent scope. It can be used to backtrack
	// from the current scope.
	Parent *Value `protobuf:"bytes,5,opt,name=parent,proto3,oneof"`
}

type Value_Default struct {
	// default is the default value for the scope.
	Default *empty.Empty `protobuf:"bytes,6,opt,name=default,proto3,oneof"`
}

type Value_Nil struct {
	// nil is an explicit nil value.
	Nil *empty.Empty `protobuf:"bytes,7,opt,name=nil,proto3,oneof"`
}

type Value_Bool struct {
	// bool is an explicit boolean value.
	Bool bool `protobuf:"varint,8,opt,name=bool,proto3,oneof"`
}

type Value_Int struct {
	// int is an explicit signed integer value.
	Int int64 `protobuf:"varint,9,opt,name=int,proto3,oneof"`
}

type Value_Uint struct {
	// uint is an explicit unsigned integer value.
	Uint uint64 `protobuf:"varint,10,opt,name=uint,proto3,oneof"`
}

type Value_Double struct {
	// double is an explicit double value.
	Double float64 `protobuf:"fixed64,11,opt,name=double,proto3,oneof"`
}

type Value_String_ struct {
	// string is an explicit string value.
	String_ string `protobuf:"bytes,12,opt,name=string,proto3,oneof"`
}

type Value_Bytes struct {
	// bytes is an explicit bytes value.
	Bytes []byte `protobuf:"bytes,13,opt,name=bytes,proto3,oneof"`
}

type Value_Enum_ struct {
	// enum is an explicit enum value.
	Enum *Value_Enum `protobuf:"bytes,14,opt,name=enum,proto3,oneof"`
}

type Value_List_ struct {
	// list is an explicit list value based on scope.
	List *Value_List `protobuf:"bytes,15,opt,name=list,proto3,oneof"`
}

type Value_Map_ struct {
	// map is an explicit map value based on scope.
	Map *Value_Map `protobuf:"bytes,16,opt,name=map,proto3,oneof"`
}

type Value_Message_ struct {
	// message is an explicit message value based on scope.
	Message *Value_Message `protobuf:"bytes,17,opt,name=message,proto3,oneof"`
}

type Value_BasicMessage struct {
	// basic_message is an explicit message value. It uses the protobuf Any
	// mechanism. While this doesn't allow complex message generation, the
	// specification of the message itself in a configuration file will be
	// less cluttered.
	BasicMessage *any.Any `protobuf:"bytes,18,opt,name=basic_message,json=basicMessage,proto3,oneof"`
}

type Value_Duration struct {
	// duration is an explicit duration.
	Duration *duration.Duration `protobuf:"bytes,19,opt,name=duration,proto3,oneof"`
}

type Value_Timestamp struct {
	// timestamp is an explicit timestamp.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,20,opt,name=timestamp,proto3,oneof"`
}

type Value_Not struct {
	// not yields a boolean value which is the inverse of the specified value
	// based on scope. It is an error if the specified value is not boolean.
	Not *Value `protobuf:"bytes,21,opt,name=not,proto3,oneof"`
}

type Value_AllOf struct {
	// all_of yields a boolean value, which is true if and only if all values
	// in the list (based on scope) are true.
	// The list is checked in order, and if a false value is encountered, the
	// remaining entries in the list are ignored.
	// It is an error if there are values which are not boolean.
	// If the list is empty, the result is true.
	AllOf *Value_ValueList `protobuf:"bytes,22,opt,name=all_of,json=allOf,proto3,oneof"`
}

type Value_AnyOf struct {
	// any_of yields a boolean value, and is true if and only if there is a
	// value in the list (based on scope) which is true.
	// The list is checked in order, and if a true value is encountered, the
	// remaining entries in the list are ignored.
	// It is an error if there are values which are not boolean.
	// If the list is empty, the result is false.
	AnyOf *Value_ValueList `protobuf:"bytes,23,opt,name=any_of,json=anyOf,proto3,oneof"`
}

type Value_Seq struct {
	// seq yields the value of last evaluated element in the list (based on
	// scope). This is normally the final element, but occurrences of break
	// or continue may cut the evaluation short. If no elements are evaluated,
	// seq yields nil.
	Seq *Value_ValueList `protobuf:"bytes,24,opt,name=seq,proto3,oneof"`
}

type Value_Switch_ struct {
	// switch yields a value (based on scope) based on conditions.
	Switch *Value_Switch `protobuf:"bytes,25,opt,name=switch,proto3,oneof"`
}

type Value_While struct {
	// while repeatedly evaluates the then part of the branch for as long
	// as the case yields true. The final value from then is returned.
	// If then is never evaluated, nil is returned.
	While *Value_Branch `protobuf:"bytes,26,opt,name=while,proto3,oneof"`
}

type Value_Break struct {
	// break breaks out of the given number of while evaluations.
	// while evaluations where break occurs in the conditional part do not
	// count.
	Break uint32 `protobuf:"varint,27,opt,name=break,proto3,oneof"`
}

type Value_Continue struct {
	// continue continues the given nth enclosing while evaluation.
	// while evaluations where continue occurs in the conditional
	// part do not count.
	Continue uint32 `protobuf:"varint,28,opt,name=continue,proto3,oneof"`
}

type Value_Store struct {
	// store stores the evaluated value in the environment.
	// The completely evaluated value can be retrieved again with load.
	Store *Value_StoredValue `protobuf:"bytes,29,opt,name=store,proto3,oneof"`
}

type Value_Proc struct {
	// proc stores the value in the environment.
	// Only when loaded, the value will be evaluated with the then valid
	// environment and scope.
	Proc *Value_StoredValue `protobuf:"bytes,30,opt,name=proc,proto3,oneof"`
}

type Value_Load struct {
	// load loads a value from the environment.
	// If no previous store is present, the value is nil.
	Load string `protobuf:"bytes,31,opt,name=load,proto3,oneof"`
}

type Value_Program_ struct {
	// program is a user defined program to determine the value.
	Program *Value_Program `protobuf:"bytes,32,opt,name=program,proto3,oneof"`
}

type Value_Range_ struct {
	// range ranges over an aggregate value. See the Range documentation for
	// which value this yields.
	Range *Value_Range `protobuf:"bytes,33,opt,name=range,proto3,oneof"`
}

func (*Value_Arg) isValue_Value() {}

func (*Value_Parent) isValue_Value() {}

func (*Value_Default) isValue_Value() {}

func (*Value_Nil) isValue_Value() {}

func (*Value_Bool) isValue_Value() {}

func (*Value_Int) isValue_Value() {}

func (*Value_Uint) isValue_Value() {}

func (*Value_Double) isValue_Value() {}

func (*Value_String_) isValue_Value() {}

func (*Value_Bytes) isValue_Value() {}

func (*Value_Enum_) isValue_Value() {}

func (*Value_List_) isValue_Value() {}

func (*Value_Map_) isValue_Value() {}

func (*Value_Message_) isValue_Value() {}

func (*Value_BasicMessage) isValue_Value() {}

func (*Value_Duration) isValue_Value() {}

func (*Value_Timestamp) isValue_Value() {}

func (*Value_Not) isValue_Value() {}

func (*Value_AllOf) isValue_Value() {}

func (*Value_AnyOf) isValue_Value() {}

func (*Value_Seq) isValue_Value() {}

func (*Value_Switch_) isValue_Value() {}

func (*Value_While) isValue_Value() {}

func (*Value_Break) isValue_Value() {}

func (*Value_Continue) isValue_Value() {}

func (*Value_Store) isValue_Value() {}

func (*Value_Proc) isValue_Value() {}

func (*Value_Load) isValue_Value() {}

func (*Value_Program_) isValue_Value() {}

func (*Value_Range_) isValue_Value() {}

// Scope describes a scope for CEL programs. It can be used for more complex
// message access. The Scope message is not directly used in the Value message.
type Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent is the parent scope of this scope. If omitted, this scope is the
	// root scope.
	Parent *Scope `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// field_descriptor describes the field leading up to the value of this Scope.
	// If omitted, this scope is the root scope.
	FieldDescriptor *descriptor.FieldDescriptorProto `protobuf:"bytes,2,opt,name=field_descriptor,json=fieldDescriptor,proto3" json:"field_descriptor,omitempty"`
	// value is the scope value for messages and scalars. For scalars, the
	// google.protobuf wrappers types will be used. Enum values will be
	// converted to google.protobuf.Int32Value.
	// CEL automatically converts the Any and wrapper types to their proper
	// message or scalar types.
	// If the scope value is not a message or a scalar, value will be omitted.
	Value *any.Any `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// list is the scope value for lists. If the list element type is a scalar,
	// a google.protobuf wrappers type will be used.
	// CEL automatically converts the Any and wrapper types to their proper
	// message or scalar types.
	// If the scope value is not a list, list will be omitted.
	List []*any.Any `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`
	// map is the scope value for maps. If the map key type is not a string, the
	// keys will be converted to a string as follows:
	//
	//     /-----------------------------------------\
	//     | Key     | String representation of Key  |
	//     |=========|===============================|
	//     | false   | "False"                       |
	//     | true    | "True"                        |
	//     | integer | The integer as decimal string |
	//     \-----------------------------------------/
	//
	// If the map value type is a scalar, a google.protobuf wrappers type will be
	// used. CEL automatically converts the Any and wrapper types to their proper
	// message or scalar types.
	// If the scope value is not a map, map will be omitted.
	Map map[string]*any.Any `protobuf:"bytes,5,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Scope) Reset() {
	*x = Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protoeval_value_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope) ProtoMessage() {}

func (x *Scope) ProtoReflect() protoreflect.Message {
	mi := &file_protoeval_value_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope.ProtoReflect.Descriptor instead.
func (*Scope) Descriptor() ([]byte, []int) {
	return file_protoeval_value_proto_rawDescGZIP(), []int{1}
}

func (x *Scope) GetParent() *Scope {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *Scope) GetFieldDescriptor() *descriptor.FieldDescriptorProto {
	if x != nil {
		return x.FieldDescriptor
	}
	return nil
}

func (x *Scope) GetValue() *any.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Scope) GetList() []*any.Any {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *Scope) GetMap() map[string]*any.Any {
	if x != nil {
		return x.Map
	}
	return nil
}

// Branch describes a conditional branch.
type Value_Branch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// case must be a boolean value. If it is true, then will be evaluated.
	Case *Value `protobuf:"bytes,1,opt,name=case,proto3" json:"case,omitempty"`
	// then is the value of this Branch if case is true.
	Then *Value `protobuf:"bytes,2,opt,name=then,proto3" json:"then,omitempty"`
}

func (x *Value_Branch) Reset() {
	*x = Value_Branch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protoeval_value_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value_Branch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value_Branch) ProtoMessage() {}

func (x *Value_Branch) ProtoReflect() protoreflect.Message {
	mi := &file_protoeval_value_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value_Branch.ProtoReflect.Descriptor instead.
func (*Value_Branch) Descriptor() ([]byte, []int) {
	return file_protoeval_value_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Value_Branch) GetCase() *Value {
	if x != nil {
		return x.Case
	}
	return nil
}

func (x *Value_Branch) GetThen() *Value {
	if x != nil {
		return x.Then
	}
	return nil
}

// Enum describes an enum value.
type Value_Enum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type is the full name of the enum type. Required.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// by selects the enum value by its numeric value or by its name. Required.
	//
	// Types that are assignable to By:
	//	*Value_Enum_Number
	//	*Value_Enum_Name
	By isValue_Enum_By `protobuf_oneof:"by"`
}

func (x *Value_Enum) Reset() {
	*x = Value_Enum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protoeval_value_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value_Enum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value_Enum) ProtoMessage() {}

func (x *Value_Enum) ProtoReflect() protoreflect.Message {
	mi := &file_protoeval_value_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value_Enum.ProtoReflect.Descriptor instead.
func (*Value_Enum) Descriptor() ([]byte, []int) {
	return file_protoeval_value_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Value_Enum) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (m *Value_Enum) GetBy() isValue_Enum_By {
	if m != nil {
		return m.By
	}
	return nil
}

func (x *Value_Enum) GetNumber() int32 {
	if x, ok := x.GetBy().(*Value_Enum_Number); ok {
		return x.Number
	}
	return 0
}

func (x *Value_Enum) GetName() string {
	if x, ok := x.GetBy().(*Value_Enum_Name); ok {
		return x.Name
	}
	return ""
}

type isValue_Enum_By interface {
	isValue_Enum_By()
}

type Value_Enum_Number struct {
	// number is the numeric value of the enum constant.
	Number int32 `protobuf:"varint,2,opt,name=number,proto3,oneof"`
}

type Value_Enum_Name struct {
	// name is the name of the enum constant.
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}

func (*Value_Enum_Number) isValue_Enum_By() {}

func (*Value_Enum_Name) isValue_Enum_By() {}

// List describes a list value.
// If both kind and type are omitted, the resulting list is a heterogeneous
// CEL list. If kind is omitted but type is not, kind is assumed to be
// MESSAGE. If kind is ENUM or MESSAGE, type must not be omitted.
type Value_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// kind is the kind of the value type of the list.
	Kind Value_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=com.github.thecount.protoeval.Value_Kind" json:"kind,omitempty"`
	// type is the full name of the value type of the list.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// values are the values in this List. Unless the list is a heterogeneous
	// CEL list, all values must have a type compatible with kind and type.
	Values []*Value `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Value_List) Reset() {
	*x = Value_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protoeval_value_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value_List) ProtoMessage() {}

func (x *Value_List) ProtoReflect() protoreflect.Message {
	mi := &file_protoeval_value_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value_List.ProtoReflect.Descriptor instead.
func (*Value_List) Descriptor() ([]byte, []int) {
	return file_protoeval_value_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Value_List) GetKind() Value_Kind {
	if x != nil {
		return x.Kind
	}
	return Value_INVALID
}

func (x *Value_List) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Value_List) GetValues() []*Value {
	if x != nil {
		return x.Values
	}
	return nil
}

// Map describes a map value.
// If key_kind is omitted, all key types allowed for protobuf maps (string,
// bool, and the integer types) are permitted for keys. If value_kind and
// value_type are both omitted, the resulting map can have heterogeneous
// values. If value_kind is omitted but value_type is not, value_kind is
// assumed to be MESSAGE. If value_kind is ENUM or MESSAGE, value_type
// must not be omitted.
type Value_Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key_kind is the kind of the key type of the map.
	// Must be a valid kind for a map key type.
	// Can be omitted, see above.
	KeyKind Value_Kind `protobuf:"varint,1,opt,name=key_kind,json=keyKind,proto3,enum=com.github.thecount.protoeval.Value_Kind" json:"key_kind,omitempty"`
	// value_kind is the kind of the value type of the map.
	ValueKind Value_Kind `protobuf:"varint,2,opt,name=value_kind,json=valueKind,proto3,enum=com.github.thecount.protoeval.Value_Kind" json:"value_kind,omitempty"`
	// value_type is the full name of the value type of the map.
	ValueType string `protobuf:"bytes,3,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`
	// entries is the list of map entries. The keys must be mutually distinct.
	// Keys and values must match the types determined by
	// key_kind/value_kind/value_type as described above.
	Entries []*Value_Map_Entry `protobuf:"bytes,4,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *Value_Map) Reset() {
	*x = Value_Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protoeval_value_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value_Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value_Map) ProtoMessage() {}

func (x *Value_Map) ProtoReflect() protoreflect.Message {
	mi := &file_protoeval_value_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value_Map.ProtoReflect.Descriptor instead.
func (*Value_Map) Descriptor() ([]byte, []int) {
	return file_protoeval_value_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Value_Map) GetKeyKind() Value_Kind {
	if x != nil {
		return x.KeyKind
	}
	return Value_INVALID
}

func (x *Value_Map) GetValueKind() Value_Kind {
	if x != nil {
		return x.ValueKind
	}
	return Value_INVALID
}

func (x *Value_Map) GetValueType() string {
	if x != nil {
		return x.ValueType
	}
	return ""
}

func (x *Value_Map) GetEntries() []*Value_Map_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// Message describes a message value.
type Value_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type is the full name of the message type. Required.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// fields describes the message fields. The types of the values must match
	// the message field types.
	Fields map[string]*Value `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Value_Message) Reset() {
	*x = Value_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protoeval_value_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value_Message) ProtoMessage() {}

func (x *Value_Message) ProtoReflect() protoreflect.Message {
	mi := &file_protoeval_value_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value_Message.ProtoReflect.Descriptor instead.
func (*Value_Message) Descriptor() ([]byte, []int) {
	return file_protoeval_value_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Value_Message) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Value_Message) GetFields() map[string]*Value {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Program describes a CEL program.
type Value_Program struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code is the program code, unless lines is used.
	// If lines is used, code must be empty.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// lines are the lines of code. The program code is derived from the lines
	// by concatenating them with newline characters between them. This is
	// a convenience feature for protobuf representations which don't have
	// easily human readable multiline strings (namely JSON).
	// If code is used, lines must be empty.
	Lines []string `protobuf:"bytes,2,rep,name=lines,proto3" json:"lines,omitempty"`
}

func (x *Value_Program) Reset() {
	*x = Value_Program{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protoeval_value_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value_Program) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value_Program) ProtoMessage() {}

func (x *Value_Program) ProtoReflect() protoreflect.Message {
	mi := &file_protoeval_value_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value_Program.ProtoReflect.Descriptor instead.
func (*Value_Program) Descriptor() ([]byte, []int) {
	return file_protoeval_value_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Value_Program) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Value_Program) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

// Range describes a value obtains by ranging over an aggregate, i. e., a
// list or a map.
type Value_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// iterable is the iterable value ranged over. If omitted, the scope value
	// is used instead. It is an error if this value is not an aggregate.
	Iterable *Value `protobuf:"bytes,1,opt,name=iterable,proto3" json:"iterable,omitempty"`
	// value is evaluated for each element in the iterable value ranged over.
	//
	// Two arguments will be added before each evaluation, and
	// removed after each evaluation: for a list, the 0-th argument is the zero
	// based list index, the 1st argument is the list value. For a map, the 0-th
	// argument is the map key, and the 1st argument is the map value.
	//
	// A list will be evaluated in order. The evaluation order for a map is
	// unspecified.
	//
	// If an evaluation yields a value other than nil, evaluation
	// stops early and the range yields that value. Otherwise, the range
	// yields nil.
	Value *Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Value_Range) Reset() {
	*x = Value_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protoeval_value_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value_Range) ProtoMessage() {}

func (x *Value_Range) ProtoReflect() protoreflect.Message {
	mi := &file_protoeval_value_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value_Range.ProtoReflect.Descriptor instead.
func (*Value_Range) Descriptor() ([]byte, []int) {
	return file_protoeval_value_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Value_Range) GetIterable() *Value {
	if x != nil {
		return x.Iterable
	}
	return nil
}

func (x *Value_Range) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// StoredValue describes a value stored in the environment.
type Value_StoredValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the storage key.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// value is the value stored under key.
	Value *Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Value_StoredValue) Reset() {
	*x = Value_StoredValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protoeval_value_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value_StoredValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value_StoredValue) ProtoMessage() {}

func (x *Value_StoredValue) ProtoReflect() protoreflect.Message {
	mi := &file_protoeval_value_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value_StoredValue.ProtoReflect.Descriptor instead.
func (*Value_StoredValue) Descriptor() ([]byte, []int) {
	return file_protoeval_value_proto_rawDescGZIP(), []int{0, 7}
}

func (x *Value_StoredValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Value_StoredValue) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Switch describes a value selection by condition.
type Value_Switch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cases is the list of cases. The list will be evaluated in order. The
	// first case which matches determines the then value of this Switch.
	// If no case matches, the default value is returned.
	Cases []*Value_Branch `protobuf:"bytes,1,rep,name=cases,proto3" json:"cases,omitempty"`
	// default is the value returned if none of the cases matches.
	// If default is omitted, the value will be nil in this case.
	Default *Value `protobuf:"bytes,2,opt,name=default,proto3" json:"default,omitempty"`
}

func (x *Value_Switch) Reset() {
	*x = Value_Switch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protoeval_value_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value_Switch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value_Switch) ProtoMessage() {}

func (x *Value_Switch) ProtoReflect() protoreflect.Message {
	mi := &file_protoeval_value_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value_Switch.ProtoReflect.Descriptor instead.
func (*Value_Switch) Descriptor() ([]byte, []int) {
	return file_protoeval_value_proto_rawDescGZIP(), []int{0, 8}
}

func (x *Value_Switch) GetCases() []*Value_Branch {
	if x != nil {
		return x.Cases
	}
	return nil
}

func (x *Value_Switch) GetDefault() *Value {
	if x != nil {
		return x.Default
	}
	return nil
}

// ValueList is a list of values, not necessarily of the same type (though
// users of ValueList often prescribe certain type constraints).
type Value_ValueList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is the list of values.
	Values []*Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Value_ValueList) Reset() {
	*x = Value_ValueList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protoeval_value_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value_ValueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value_ValueList) ProtoMessage() {}

func (x *Value_ValueList) ProtoReflect() protoreflect.Message {
	mi := &file_protoeval_value_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value_ValueList.ProtoReflect.Descriptor instead.
func (*Value_ValueList) Descriptor() ([]byte, []int) {
	return file_protoeval_value_proto_rawDescGZIP(), []int{0, 9}
}

func (x *Value_ValueList) GetValues() []*Value {
	if x != nil {
		return x.Values
	}
	return nil
}

// Entry describes a map entry.
type Value_Map_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the the of this entry. Required.
	Key *Value `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// value is the value of this entry. Required.
	Value *Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Value_Map_Entry) Reset() {
	*x = Value_Map_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protoeval_value_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value_Map_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value_Map_Entry) ProtoMessage() {}

func (x *Value_Map_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_protoeval_value_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value_Map_Entry.ProtoReflect.Descriptor instead.
func (*Value_Map_Entry) Descriptor() ([]byte, []int) {
	return file_protoeval_value_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Value_Map_Entry) GetKey() *Value {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Value_Map_Entry) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_protoeval_value_proto protoreflect.FileDescriptor

var file_protoeval_value_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c, 0x2f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb9, 0x1a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x72,
	0x6f, 0x70, 0x41, 0x72, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x65, 0x76, 0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x12, 0x30, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x03, 0x61, 0x72, 0x67, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x6e, 0x69,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x03, 0x6e, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x03,
	0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x03, 0x69, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x04, 0x75, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x04, 0x75, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x05, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x3f, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x74, 0x68,
	0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x65,
	0x6e, 0x75, 0x6d, 0x12, 0x3f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x74,
	0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61,
	0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x74,
	0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61,
	0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x03, 0x6d,
	0x61, 0x70, 0x12, 0x48, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65,
	0x76, 0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0d,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x38,
	0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x61, 0x6c, 0x6c, 0x5f,
	0x6f, 0x66, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x4f,
	0x66, 0x12, 0x47, 0x0a, 0x06, 0x61, 0x6e, 0x79, 0x5f, 0x6f, 0x66, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x74,
	0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61,
	0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6e, 0x79, 0x4f, 0x66, 0x12, 0x42, 0x0a, 0x03, 0x73, 0x65,
	0x71, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x45,
	0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x74, 0x68, 0x65, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x43, 0x0a, 0x05, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x65, 0x76, 0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x48, 0x00, 0x52, 0x05, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x12, 0x1c, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x12, 0x48, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x74, 0x68, 0x65,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x70, 0x72,
	0x6f, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x70, 0x72,
	0x6f, 0x63, 0x12, 0x14, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x48, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x12, 0x42, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x74,
	0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61,
	0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x7c, 0x0a, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x38, 0x0a, 0x04, 0x63, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x74, 0x68, 0x65, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x63, 0x61, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x68,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x74, 0x68, 0x65, 0x6e, 0x1a, 0x50, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x04, 0x0a, 0x02, 0x62, 0x79, 0x1a, 0x97, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x74, 0x68, 0x65, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76,
	0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x1a, 0xfb, 0x02, 0x0a, 0x03, 0x4d, 0x61, 0x70, 0x12, 0x44, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x48,
	0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76,
	0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4d,
	0x61, 0x70, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x1a, 0x7b, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x74,
	0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61,
	0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xd0,
	0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x50,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x74, 0x68, 0x65, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x1a, 0x5f, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x74, 0x68,
	0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x33, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x1a, 0x85, 0x01, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x40, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76,
	0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x74,
	0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61,
	0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x5b,
	0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x74, 0x68, 0x65, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x8b, 0x01, 0x0a, 0x06,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x41, 0x0a, 0x05, 0x63, 0x61, 0x73, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x52, 0x05, 0x63, 0x61, 0x73, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x1a, 0x49, 0x0a, 0x09, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f,
	0x55, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x55, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x33,
	0x32, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x49, 0x58, 0x45, 0x44, 0x36, 0x34, 0x10, 0x06,
	0x12, 0x0b, 0x0a, 0x07, 0x46, 0x49, 0x58, 0x45, 0x44, 0x33, 0x32, 0x10, 0x07, 0x12, 0x08, 0x0a,
	0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e,
	0x47, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x0b,
	0x12, 0x09, 0x0a, 0x05, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x55,
	0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x4e, 0x55, 0x4d, 0x10,
	0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x46, 0x49, 0x58, 0x45, 0x44, 0x33, 0x32, 0x10, 0x0f, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x46, 0x49, 0x58, 0x45, 0x44, 0x36, 0x34, 0x10, 0x10, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x11, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4e,
	0x54, 0x36, 0x34, 0x10, 0x12, 0x22, 0x04, 0x08, 0x0a, 0x10, 0x0a, 0x2a, 0x05, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfc, 0x02, 0x0a, 0x05,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x03, 0x6d,
	0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x1a, 0x4c, 0x0a, 0x08,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x1f, 0x5a, 0x1d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x68, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x76, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_protoeval_value_proto_rawDescOnce sync.Once
	file_protoeval_value_proto_rawDescData = file_protoeval_value_proto_rawDesc
)

func file_protoeval_value_proto_rawDescGZIP() []byte {
	file_protoeval_value_proto_rawDescOnce.Do(func() {
		file_protoeval_value_proto_rawDescData = protoimpl.X.CompressGZIP(file_protoeval_value_proto_rawDescData)
	})
	return file_protoeval_value_proto_rawDescData
}

var file_protoeval_value_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protoeval_value_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_protoeval_value_proto_goTypes = []interface{}{
	(Value_Kind)(0),                         // 0: com.github.thecount.protoeval.Value.Kind
	(*Value)(nil),                           // 1: com.github.thecount.protoeval.Value
	(*Scope)(nil),                           // 2: com.github.thecount.protoeval.Scope
	(*Value_Branch)(nil),                    // 3: com.github.thecount.protoeval.Value.Branch
	(*Value_Enum)(nil),                      // 4: com.github.thecount.protoeval.Value.Enum
	(*Value_List)(nil),                      // 5: com.github.thecount.protoeval.Value.List
	(*Value_Map)(nil),                       // 6: com.github.thecount.protoeval.Value.Map
	(*Value_Message)(nil),                   // 7: com.github.thecount.protoeval.Value.Message
	(*Value_Program)(nil),                   // 8: com.github.thecount.protoeval.Value.Program
	(*Value_Range)(nil),                     // 9: com.github.thecount.protoeval.Value.Range
	(*Value_StoredValue)(nil),               // 10: com.github.thecount.protoeval.Value.StoredValue
	(*Value_Switch)(nil),                    // 11: com.github.thecount.protoeval.Value.Switch
	(*Value_ValueList)(nil),                 // 12: com.github.thecount.protoeval.Value.ValueList
	(*Value_Map_Entry)(nil),                 // 13: com.github.thecount.protoeval.Value.Map.Entry
	nil,                                     // 14: com.github.thecount.protoeval.Value.Message.FieldsEntry
	nil,                                     // 15: com.github.thecount.protoeval.Scope.MapEntry
	(*_struct.ListValue)(nil),               // 16: google.protobuf.ListValue
	(*empty.Empty)(nil),                     // 17: google.protobuf.Empty
	(*any.Any)(nil),                         // 18: google.protobuf.Any
	(*duration.Duration)(nil),               // 19: google.protobuf.Duration
	(*timestamp.Timestamp)(nil),             // 20: google.protobuf.Timestamp
	(*descriptor.FieldDescriptorProto)(nil), // 21: google.protobuf.FieldDescriptorProto
}
var file_protoeval_value_proto_depIdxs = []int32{
	1,  // 0: com.github.thecount.protoeval.Value.args:type_name -> com.github.thecount.protoeval.Value
	16, // 1: com.github.thecount.protoeval.Value.scope:type_name -> google.protobuf.ListValue
	1,  // 2: com.github.thecount.protoeval.Value.parent:type_name -> com.github.thecount.protoeval.Value
	17, // 3: com.github.thecount.protoeval.Value.default:type_name -> google.protobuf.Empty
	17, // 4: com.github.thecount.protoeval.Value.nil:type_name -> google.protobuf.Empty
	4,  // 5: com.github.thecount.protoeval.Value.enum:type_name -> com.github.thecount.protoeval.Value.Enum
	5,  // 6: com.github.thecount.protoeval.Value.list:type_name -> com.github.thecount.protoeval.Value.List
	6,  // 7: com.github.thecount.protoeval.Value.map:type_name -> com.github.thecount.protoeval.Value.Map
	7,  // 8: com.github.thecount.protoeval.Value.message:type_name -> com.github.thecount.protoeval.Value.Message
	18, // 9: com.github.thecount.protoeval.Value.basic_message:type_name -> google.protobuf.Any
	19, // 10: com.github.thecount.protoeval.Value.duration:type_name -> google.protobuf.Duration
	20, // 11: com.github.thecount.protoeval.Value.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 12: com.github.thecount.protoeval.Value.not:type_name -> com.github.thecount.protoeval.Value
	12, // 13: com.github.thecount.protoeval.Value.all_of:type_name -> com.github.thecount.protoeval.Value.ValueList
	12, // 14: com.github.thecount.protoeval.Value.any_of:type_name -> com.github.thecount.protoeval.Value.ValueList
	12, // 15: com.github.thecount.protoeval.Value.seq:type_name -> com.github.thecount.protoeval.Value.ValueList
	11, // 16: com.github.thecount.protoeval.Value.switch:type_name -> com.github.thecount.protoeval.Value.Switch
	3,  // 17: com.github.thecount.protoeval.Value.while:type_name -> com.github.thecount.protoeval.Value.Branch
	10, // 18: com.github.thecount.protoeval.Value.store:type_name -> com.github.thecount.protoeval.Value.StoredValue
	10, // 19: com.github.thecount.protoeval.Value.proc:type_name -> com.github.thecount.protoeval.Value.StoredValue
	8,  // 20: com.github.thecount.protoeval.Value.program:type_name -> com.github.thecount.protoeval.Value.Program
	9,  // 21: com.github.thecount.protoeval.Value.range:type_name -> com.github.thecount.protoeval.Value.Range
	2,  // 22: com.github.thecount.protoeval.Scope.parent:type_name -> com.github.thecount.protoeval.Scope
	21, // 23: com.github.thecount.protoeval.Scope.field_descriptor:type_name -> google.protobuf.FieldDescriptorProto
	18, // 24: com.github.thecount.protoeval.Scope.value:type_name -> google.protobuf.Any
	18, // 25: com.github.thecount.protoeval.Scope.list:type_name -> google.protobuf.Any
	15, // 26: com.github.thecount.protoeval.Scope.map:type_name -> com.github.thecount.protoeval.Scope.MapEntry
	1,  // 27: com.github.thecount.protoeval.Value.Branch.case:type_name -> com.github.thecount.protoeval.Value
	1,  // 28: com.github.thecount.protoeval.Value.Branch.then:type_name -> com.github.thecount.protoeval.Value
	0,  // 29: com.github.thecount.protoeval.Value.List.kind:type_name -> com.github.thecount.protoeval.Value.Kind
	1,  // 30: com.github.thecount.protoeval.Value.List.values:type_name -> com.github.thecount.protoeval.Value
	0,  // 31: com.github.thecount.protoeval.Value.Map.key_kind:type_name -> com.github.thecount.protoeval.Value.Kind
	0,  // 32: com.github.thecount.protoeval.Value.Map.value_kind:type_name -> com.github.thecount.protoeval.Value.Kind
	13, // 33: com.github.thecount.protoeval.Value.Map.entries:type_name -> com.github.thecount.protoeval.Value.Map.Entry
	14, // 34: com.github.thecount.protoeval.Value.Message.fields:type_name -> com.github.thecount.protoeval.Value.Message.FieldsEntry
	1,  // 35: com.github.thecount.protoeval.Value.Range.iterable:type_name -> com.github.thecount.protoeval.Value
	1,  // 36: com.github.thecount.protoeval.Value.Range.value:type_name -> com.github.thecount.protoeval.Value
	1,  // 37: com.github.thecount.protoeval.Value.StoredValue.value:type_name -> com.github.thecount.protoeval.Value
	3,  // 38: com.github.thecount.protoeval.Value.Switch.cases:type_name -> com.github.thecount.protoeval.Value.Branch
	1,  // 39: com.github.thecount.protoeval.Value.Switch.default:type_name -> com.github.thecount.protoeval.Value
	1,  // 40: com.github.thecount.protoeval.Value.ValueList.values:type_name -> com.github.thecount.protoeval.Value
	1,  // 41: com.github.thecount.protoeval.Value.Map.Entry.key:type_name -> com.github.thecount.protoeval.Value
	1,  // 42: com.github.thecount.protoeval.Value.Map.Entry.value:type_name -> com.github.thecount.protoeval.Value
	1,  // 43: com.github.thecount.protoeval.Value.Message.FieldsEntry.value:type_name -> com.github.thecount.protoeval.Value
	18, // 44: com.github.thecount.protoeval.Scope.MapEntry.value:type_name -> google.protobuf.Any
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_protoeval_value_proto_init() }
func file_protoeval_value_proto_init() {
	if File_protoeval_value_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protoeval_value_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protoeval_value_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protoeval_value_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value_Branch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protoeval_value_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value_Enum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protoeval_value_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protoeval_value_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value_Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protoeval_value_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protoeval_value_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value_Program); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protoeval_value_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protoeval_value_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value_StoredValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protoeval_value_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value_Switch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protoeval_value_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value_ValueList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protoeval_value_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value_Map_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protoeval_value_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Value_Arg)(nil),
		(*Value_Parent)(nil),
		(*Value_Default)(nil),
		(*Value_Nil)(nil),
		(*Value_Bool)(nil),
		(*Value_Int)(nil),
		(*Value_Uint)(nil),
		(*Value_Double)(nil),
		(*Value_String_)(nil),
		(*Value_Bytes)(nil),
		(*Value_Enum_)(nil),
		(*Value_List_)(nil),
		(*Value_Map_)(nil),
		(*Value_Message_)(nil),
		(*Value_BasicMessage)(nil),
		(*Value_Duration)(nil),
		(*Value_Timestamp)(nil),
		(*Value_Not)(nil),
		(*Value_AllOf)(nil),
		(*Value_AnyOf)(nil),
		(*Value_Seq)(nil),
		(*Value_Switch_)(nil),
		(*Value_While)(nil),
		(*Value_Break)(nil),
		(*Value_Continue)(nil),
		(*Value_Store)(nil),
		(*Value_Proc)(nil),
		(*Value_Load)(nil),
		(*Value_Program_)(nil),
		(*Value_Range_)(nil),
	}
	file_protoeval_value_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Value_Enum_Number)(nil),
		(*Value_Enum_Name)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protoeval_value_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protoeval_value_proto_goTypes,
		DependencyIndexes: file_protoeval_value_proto_depIdxs,
		EnumInfos:         file_protoeval_value_proto_enumTypes,
		MessageInfos:      file_protoeval_value_proto_msgTypes,
	}.Build()
	File_protoeval_value_proto = out.File
	file_protoeval_value_proto_rawDesc = nil
	file_protoeval_value_proto_goTypes = nil
	file_protoeval_value_proto_depIdxs = nil
}
